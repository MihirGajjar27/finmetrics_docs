import React, { useState, useEffect } from "react";
import Header from "@/components/Header";
import PageTitle from "@/components/docs/PageTitle";
import Title from "@/components/docs/Title";
import Paragraph from "@/components/docs/Paragraph";
import Bold from "@/components/docs/Bold";
import Page from "@/components/Page";
import LeftSidebar from "@/components/LeftSidebar";
import OnThisPage from "@/components/OnThisPage";
import DocPath from "@/components/docs/DocPath";
import Note from "@/components/docs/Note";
import Prop from "@/components/docs/Prop";
import MethodTable from "@/components/docs/MethodTable";
import MethodRow from "@/components/docs/MethodRow";
import TextLine from "@/components/docs/TextLine";
import CodeBlock from "@/components/docs/CodeBlock";
import Tabs from "@/components/docs/Tabs";
import PropSpread from "@/components/docs/PropSpread";
import Footer from "@/components/Footer";


const holding_period_return_py = `import finmetrics as fm

# setting the parameters
beginning_value = 100
ending_value = 200
total_income = 50

# calling the method
hpr = fm.holding_period_return(beginning_value, ending_value, total_income)
`
const holding_period_return_js = `// tbd








`
const holding_period_return_mp_py = `import finmetrics as fm

# Sequence of floats
annual_returns = [0.2, 0.5, 0.24, 0.91, 0.22]

# calling the method
hpr = fm.holding_period_return_multi_period(annual_returns)
`
const holding_period_return_mp_js = `// tbd






`
const arithmetic_return_py = `import finmetrics as fm

# Sequence of floats
holding_period_returns = [0.5, -0.6, 0.21, -0.82, 0.2]

# calling the method
arithmetic_return = fm.arithmetic_return(holding_period_returns)
`
const arithmetic_return_js = `// tbd






`
const geometric_return_py = `import finmetrics as fm

# Sequence of floats
holding_period_returns = [0.5, -0.6, 0.21, -0.82, 0.2]

# calling the method
geometric_return = fm.geometric_return(holding_period_returns)
`
const geometric_return_js = `// tbd






`
const harmonic_mean_py = `import finmetrics as fm

# Sequence of floats
values = [20, 30, 25, 80, 12]

# calling the method
harmonic_mean = fm.harmonic_mean(values)
`
const harmonic_mean_js = `// tbd






`


export default function RatesAndReturns() {
    // Lazy initializer: Only run on the client (after window exists).
    const [isDarkMode, setIsDarkMode] = useState(() => {
        if (typeof window !== "undefined") {
            const saved = localStorage.getItem("isDarkMode");
            return saved !== null ? saved === "true" : false;
        }
        return false;
    });

    // Flag to ensure client-only rendering after mounting.
    const [mounted, setMounted] = useState(false);

    useEffect(() => {
        setMounted(true);
    }, []);

    // Update localStorage whenever isDarkMode changes.
    useEffect(() => {
        localStorage.setItem("isDarkMode", isDarkMode);
    }, [isDarkMode]);

    // Don't render anything until after mounting to avoid flash of default theme.
    if (!mounted) return null;

    // Define the on-page links as a JSON object.
    const onThisPageLinks = {
        "Holding Period Return": "#holding-period-return",
        "Holding Period Return Multi Period": "#holding-period-return-multi-period",
        "Arithmetic Return": "#arithmetic-return",
        "Geometric Return": "#geometric-return",
        "Harmonic Mean": "#harmonic-mean",
    };

    return (
        <div
            className={`min-h-screen ${
                isDarkMode ? "bg-gray-1000 text-white" : "bg-white text-black"
            }`}
        >
            <Header isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode} />
            <div className="flex flex-row flex-nowrap justify-center">
                <LeftSidebar isDark={isDarkMode} />
                <Page>
                    <DocPath isDark={isDarkMode} filepathArray={["Methods", "Rates and Returns"]}/>
                    <PageTitle>Rates & Returns</PageTitle>
                    <Paragraph>
                        This page contains methods designed to calculate various rates and returns.
                    </Paragraph>

                    {/*Holding period return*/}
                    <Title id={"holding-period-return"}>Holding Period Return</Title>
                    <Paragraph isDark={isDarkMode}>
                        The holding period return function calculates the return earned on an asset
                        purchased for a beginning price, sold for an ending price, and any additional income
                        generated by the asset during its holding period
                    </Paragraph>
                    <Tabs tabs={["Python", "Javascript"]}>
                        <CodeBlock isDark={isDarkMode} language={"py"} code={holding_period_return_py}/>
                        <CodeBlock isDark={isDarkMode} language={"js"} code={holding_period_return_js}/>
                    </Tabs>
                    <MethodTable headers={["Param", "Type", "Default", "Description"]}>
                        <MethodRow isDark={isDarkMode}>
                            <Prop isDark={isDarkMode}>beginning_value</Prop>
                            <Prop isDark={isDarkMode}>float</Prop>
                            <Prop isDark={isDarkMode}>null</Prop>
                            <TextLine isDark={isDarkMode}>Starting price of the asset</TextLine>
                        </MethodRow>
                        <MethodRow isDark={isDarkMode}>
                            <Prop isDark={isDarkMode}>ending_value</Prop>
                            <Prop isDark={isDarkMode}>float</Prop>
                            <Prop isDark={isDarkMode}>null</Prop>
                            <TextLine isDark={isDarkMode}>Ending price of the asset</TextLine>
                        </MethodRow>
                        <MethodRow isDark={isDarkMode}>
                            <Prop isDark={isDarkMode}>total_income</Prop>
                            <Prop isDark={isDarkMode}>float</Prop>
                            <Prop isDark={isDarkMode}>0.0</Prop>
                            <TextLine isDark={isDarkMode}>Total income generated by the asset during the holding period</TextLine>
                        </MethodRow>
                    </MethodTable>

                    {/* Holding period return multi period */}
                    <Title id={"holding-period-return-multi-period"}>Holding Period Return Multi Period</Title>
                    <Paragraph>
                        The multi period holding period return (hpr) method performs the same hpr
                        computation as above for a sequence of holding period returns. The method accepts
                        any sequence of floats or a numpy array of floats.
                    </Paragraph>
                    <Tabs tabs={["Python", "Javascript"]}>
                        <CodeBlock isDark={isDarkMode} language={"py"} code={holding_period_return_mp_py}/>
                        <CodeBlock isDark={isDarkMode} language={"js"} code={holding_period_return_mp_js}/>
                    </Tabs>
                    <MethodTable headers={["Param", "Type", "Default", "Description"]}>
                        <MethodRow isDark={isDarkMode}>
                            <Prop isDark={isDarkMode}>annual_returns</Prop>
                            <PropSpread>
                                <Prop isDark={isDarkMode}>Sequence[float]</Prop>
                                <Prop isDark={isDarkMode}>numpy.ndarray</Prop>
                            </PropSpread>
                            <Prop isDark={isDarkMode}>null</Prop>
                            <TextLine isDark={isDarkMode}>Starting price of the asset</TextLine>
                        </MethodRow>
                    </MethodTable>

                    {/* Arithmetic Return */}
                    <Title id={"arithmetic-return"}>Arithmetic Return</Title>
                    <Paragraph>
                        The arithmetic return method computes the arithmetic return given a
                        sequence of holding period returns. This method assumes that each return
                        in the holding period returns sequence has the same timeframe.
                    </Paragraph>
                    <Tabs tabs={["Python", "Javascript"]}>
                        <CodeBlock isDark={isDarkMode} language={"py"} code={arithmetic_return_py}/>
                        <CodeBlock isDark={isDarkMode} language={"js"} code={arithmetic_return_js}/>
                    </Tabs>
                    <MethodTable headers={["Param", "Type", "Default", "Description"]}>
                        <MethodRow isDark={isDarkMode}>
                            <Prop isDark={isDarkMode}>holding_period_returns</Prop>
                            <PropSpread>
                                <Prop isDark={isDarkMode}>Sequence[float]</Prop>
                                <Prop isDark={isDarkMode}>numpy.ndarray</Prop>
                            </PropSpread>
                            <Prop isDark={isDarkMode}>null</Prop>
                            <TextLine isDark={isDarkMode}>A sequence of holding period returns</TextLine>
                        </MethodRow>
                    </MethodTable>

                    {/* Geometric Return */}
                    <Title id={"geometric-return"}>Geometric Return</Title>
                    <Paragraph>
                        The geometric return method computes the geom. return given a
                        sequence of holding period returns. This method assumes that each return
                        in the holding period returns sequence has the same timeframe.
                    </Paragraph>
                    <Tabs tabs={["Python", "Javascript"]}>
                        <CodeBlock isDark={isDarkMode} language={"py"} code={geometric_return_py}/>
                        <CodeBlock isDark={isDarkMode} language={"js"} code={geometric_return_js}/>
                    </Tabs>
                    <MethodTable headers={["Param", "Type", "Default", "Description"]}>
                        <MethodRow isDark={isDarkMode}>
                            <Prop isDark={isDarkMode}>holding_period_returns</Prop>
                            <PropSpread>
                                <Prop isDark={isDarkMode}>Sequence[float]</Prop>
                                <Prop isDark={isDarkMode}>numpy.ndarray</Prop>
                            </PropSpread>
                            <Prop isDark={isDarkMode}>null</Prop>
                            <TextLine isDark={isDarkMode}>A sequence of holding period returns</TextLine>
                        </MethodRow>
                    </MethodTable>

                    {/* Harmonic Mean */}
                    <Title id={"harmonic-mean"}>Harmonic Mean</Title>
                    <Paragraph>
                        The harmonic mean method computes the harmonic return given a
                        sequence of values. This method assumes that each values is a positive non-zero
                        value
                    </Paragraph>
                    <Tabs tabs={["Python", "Javascript"]}>
                        <CodeBlock isDark={isDarkMode} language={"py"} code={harmonic_mean_py}/>
                        <CodeBlock isDark={isDarkMode} language={"js"} code={harmonic_mean_js}/>
                    </Tabs>
                    <MethodTable headers={["Param", "Type", "Default", "Description"]}>
                        <MethodRow isDark={isDarkMode}>
                            <Prop isDark={isDarkMode}>values</Prop>
                            <PropSpread>
                                <Prop isDark={isDarkMode}>Sequence[float]</Prop>
                                <Prop isDark={isDarkMode}>numpy.ndarray</Prop>
                            </PropSpread>
                            <Prop isDark={isDarkMode}>null</Prop>
                            <TextLine isDark={isDarkMode}>A sequence of positive non-zero values</TextLine>
                        </MethodRow>
                    </MethodTable>
                </Page>
                <OnThisPage links={onThisPageLinks} isDark={isDarkMode} />
            </div>
            <Footer isDark={isDarkMode}/>
        </div>
    );
}
